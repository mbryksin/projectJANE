// Signature file for parser generated by fsyacc
module Parser
type token = 
  | PLUS
  | DOT
  | LOG_OR
  | LOG_AND
  | INSTANCE_OF
  | EQUAL_SIGN
  | END
  | O_SQR_BRACKET of (AST.Position)
  | C_SQR_BRACKET of (AST.Position)
  | O_CUR_BRACKET of (AST.Position)
  | C_CUR_BRACKET of (AST.Position)
  | O_BRACKET of (AST.Position)
  | C_BRACKET of (AST.Position)
  | COMMA of (AST.Position)
  | SEMICOLON of (AST.Position)
  | NEW of (AST.Position)
  | SUPER of (AST.Position)
  | RETURN of (AST.Position)
  | CONTINUE of (AST.Position)
  | BREAK of (AST.Position)
  | WHILE of (AST.Position)
  | FOR of (AST.Position)
  | IF of (AST.Position)
  | ELSE of (AST.Position)
  | STATIC of (AST.Position)
  | FINAL of (AST.Position)
  | VOID of (AST.Position)
  | CLASS of (AST.Position)
  | INTERFACE of (AST.Position)
  | EXTENDS of (AST.Position)
  | IMPLEMENTS of (AST.Position)
  | EXCL_MARK of (AST.Position)
  | HYPHEN of (AST.Position)
  | FACTOR of (AST.BinaryOperator)
  | COMPARE of (AST.BinaryOperator)
  | LOGICAL of (AST.BinaryOperator)
  | NULL of (AST.NullLiteral)
  | CHAR of (AST.CharLiteral)
  | BOOLEAN of (AST.BooleanLiteral)
  | FLOAT of (AST.FloatLiteral)
  | INT of (AST.IntegerLiteral)
  | STRING of (AST.StringLiteral)
  | IDENT of (AST.ID)
type tokenId = 
    | TOKEN_PLUS
    | TOKEN_DOT
    | TOKEN_LOG_OR
    | TOKEN_LOG_AND
    | TOKEN_INSTANCE_OF
    | TOKEN_EQUAL_SIGN
    | TOKEN_END
    | TOKEN_O_SQR_BRACKET
    | TOKEN_C_SQR_BRACKET
    | TOKEN_O_CUR_BRACKET
    | TOKEN_C_CUR_BRACKET
    | TOKEN_O_BRACKET
    | TOKEN_C_BRACKET
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_NEW
    | TOKEN_SUPER
    | TOKEN_RETURN
    | TOKEN_CONTINUE
    | TOKEN_BREAK
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_STATIC
    | TOKEN_FINAL
    | TOKEN_VOID
    | TOKEN_CLASS
    | TOKEN_INTERFACE
    | TOKEN_EXTENDS
    | TOKEN_IMPLEMENTS
    | TOKEN_EXCL_MARK
    | TOKEN_HYPHEN
    | TOKEN_FACTOR
    | TOKEN_COMPARE
    | TOKEN_LOGICAL
    | TOKEN_NULL
    | TOKEN_CHAR
    | TOKEN_BOOLEAN
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_STRING
    | TOKEN_IDENT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Program
    | NONTERM_ProgramMembers
    | NONTERM_ProgramMember
    | NONTERM_Class
    | NONTERM_ExtendsOrNot
    | NONTERM_ImplementsOrNot
    | NONTERM_ClassMembers
    | NONTERM_Interface
    | NONTERM_InterfaceMembers
    | NONTERM_IDENTRest
    | NONTERM_ClassConstructor
    | NONTERM_ClassMember
    | NONTERM_ClassField
    | NONTERM_ClassMethod
    | NONTERM_ClassReturnMethod
    | NONTERM_ClassVoidMethod
    | NONTERM_InterfaceMember
    | NONTERM_InterfaceField
    | NONTERM_InterfaceMethod
    | NONTERM_InterfaceReturnMethod
    | NONTERM_InterfaceVoidMethod
    | NONTERM_FormalParameters
    | NONTERM_FormalParametersRest
    | NONTERM_FormalParameter
    | NONTERM_Statement
    | NONTERM_MemberCallStatement
    | NONTERM_Assignment
    | NONTERM_Indexes
    | NONTERM_Declaration
    | NONTERM_Block
    | NONTERM_Statements
    | NONTERM_ForStatement
    | NONTERM_WhileStatement
    | NONTERM_IfStatement
    | NONTERM_BreakStatement
    | NONTERM_ContinueStatement
    | NONTERM_ReturnStatement
    | NONTERM_SuperStatement
    | NONTERM_Initializer
    | NONTERM_ArrayInitializer
    | NONTERM_ArrayInitializerRest
    | NONTERM_Expression
    | NONTERM_ExprOr
    | NONTERM_ExprAnd
    | NONTERM_ExprInstanceOf
    | NONTERM_Type
    | NONTERM_Dimension
    | NONTERM_ExprCompareOp
    | NONTERM_ExprTermRest
    | NONTERM_ExprAddOrSubOp
    | NONTERM_ExprTermOp
    | NONTERM_ExprFactorRest
    | NONTERM_ExprFactorOp
    | NONTERM_ExprUnaryOp
    | NONTERM_IdOrMember
    | NONTERM_ExprMemberCallRest
    | NONTERM_ExprMemberCall
    | NONTERM_PrimaryExpr
    | NONTERM_Primary
    | NONTERM_Identifier
    | NONTERM_Constructor
    | NONTERM_Member
    | NONTERM_Suffix
    | NONTERM_ArrayElements
    | NONTERM_ArrayElement
    | NONTERM_Arguments
    | NONTERM_ArgsRest
    | NONTERM_Literal
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (AST.Program) 
